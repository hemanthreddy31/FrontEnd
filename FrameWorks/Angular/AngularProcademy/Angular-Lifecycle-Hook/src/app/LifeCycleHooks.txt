The angular life cycle hooks are methods that angular invokes on a directive or a component, as it creates, changes and destroys them


--Component Created

ngOnChanges
ngOnInit
ngDoCheck
ngAfterContentInit
ngAfterContentChecked
ngAfterViewInit
ngAfterViewChecked
ngDestroy

--ComponentCreated

-------ngOnInit LifeCycle Hook

** angular raises ngOnInit hook after it creates the component and update its input properties. 
   this hook is raised after ngOnChanges


** The ngOnInit hook is fired only once i.e during the first change detection cycle. After that, if 
    the input property changes , this hook does not gets called.


**By the time ngOninit gets called, none of the child components or projected contents or view are available at this point 
Hence any property decorated with @ViewChild, @ViewChildren, @ContentChild or @ContentChildren will not be available to use.




-----ngDoCheck LifeCycle Hook


**Angular invokes ngDoCheck hook during every change Detection cycle .This hook is invoked even if there is no change in input bound properties.

** For exmaple: The ngDoCheck lifecycle hook will run if you clicked a button on webpage, which does not do aynthing. But still its an event so the change
    detection cycle will run and execute ngDoCheck hook.

**Angular invokes ngDoCheck lifecycle hook after ngOnChanges & ngOnInit hooks.


**You can use this hook to implement a custom change detection , when ever angular fails to detect any changes
  made to input bound properties

** The ngDoCheck hook is also a great place to use, when you wnat ot execute some code on every change detection cycle.


--ngAfterContentInit

**The ngAfterContentInit lifecycle hook is called after the components projected content has been fully initialized.

**Angular updates the properties decorated with @ContentChild & @ ContentChildren decorator just before this hook is raised.

** THis lifecycle hook gets called only once, during the first change detection cycle.After that , if the projected content changes , this lifcycle hook will not get called.


--ngAfterContentChecked

**The ngAfterContentChecked lifecycle hook is called during every change detection cycle, after angular has finished initializing and checking projected content.

**Angular also updates the properties decorated with @ContentChild & @ContentChildern decorateor, before raising ngAfterContentChecked hook.

**Angular raises this hook even if there is no projected content in the component.

**The ngAfterContentInit hook is called after the projected content is initialized ngAfterContentChecked is called whenever the projected content is initialized , check & 
  updated.

--ngAfterViewInit

**The ngAfterViewInit is called after the components View template and all its child components View
  components view templates are fully initialized

**Angular also updates the properties decorated with @ViewChild and @ViewChildren decorator before raising this hook.
** By the time this hook gets called for a component, all the lifecycle hook methods of child components and directives are completely processed and child components 
   are completely ready


--ngAfterViewChecked





--ngOnDestroy 

 ** Angular fires ngOnDestroy lifecycle hook just before the component or the directive is destroyed i.e removed from the DOM.
 ** This hook is a great place to do some cleanup work like unsubscribe from an obesrvable or detach event handler etc.. as this hook is called right before the componet 
    is destroyd 
** This ngOnDestroy is the last lifecycle hook of a component & a directive 









